# -*- coding: utf-8 -*-
"""Funzioni_Topic_detection.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WxmSseuQOFI7kqLMFCy5JbehIGvPHJig

Funzioni Topic detection
"""

from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.decomposition import TruncatedSVD
import gensim
import funzioni_preprocessing_text as fpt
import re

def tf_idfLSA(lemmatized_bigram_string):
  vectorizer = TfidfVectorizer()
  M=vectorizer.fit_transform(lemmatized_bigram_string)
  termini=vectorizer.get_feature_names()
  return vectorizer,M,termini


def lsa(M,termini):
  lsa = TruncatedSVD(n_components=10,n_iter=300)
  lsa.fit(M)
  return lsa

def get_concettiLSA(lsa,termini):
  concetti={}
#usare questo quelli di prima sono prove
  for i,j in enumerate(lsa.components_):
    parolaChiave=zip(termini,abs(j))
    paroleOrdinate = sorted(parolaChiave,key=lambda x:x[1], reverse = True)
    paroleOrdinate = paroleOrdinate[:10]
    concetti["concetto_" + str(i)]=[]
    #print("Asse concettuale n. ",i, ": ")
    for k in paroleOrdinate:
      concetti["concetto_" + str(i)].append(k)
      #print(k)
    #print('\n\n')
  return concetti

def punteggi_LSA(concetti,parole):
  punteggi=dict()

  for key,lista in concetti.items():
    punteggio=0
    for i in parole:
      for concetto_parola,valore in lista:
        if(i == concetto_parola):
          punteggio+=valore
    punteggi[key]=punteggio
  return punteggi

def result_TopicLSA(punteggi,concetti):
  risultato = []
  for concetto,valore in punteggi.items():
    if valore!=0:
      print(concetto, concetti[concetto])
  return risultato

def result_Topic_max(punteggi,concetti):
  risultato = []
  massimo = max(punteggi.values())
  for concetto,valore in punteggi.items():
    if valore == massimo:
      risultato.append((concetto, concetti[concetto]))
  return risultato

def create_lsa_model(corpus):
  post,bigram_mdl=fpt.clear_corpus(corpus)
  lemmatized_bigram_string=[' '.join(word) for word in post]
  vectorizer,M,termini=tf_idfLSA(lemmatized_bigram_string)
  lsa2=lsa(M,termini)
  termini=vectorizer.get_feature_names()
  concetti=get_concettiLSA(lsa2)
  return bigram_mdl,vectorizer,concetti

def lda(corpus):
  parole_valore=[]
  concetti_LDA={}
  post,_=fpt.clear_corpus(corpus)
  dictionary = gensim.corpora.Dictionary(post)
  corpus2 = [dictionary.doc2bow(text) for text in post]

  tfidf = gensim.models.TfidfModel(corpus2)
  corpus_tfidf = tfidf[corpus2]

  ldamodel = gensim.models.ldamodel.LdaModel(corpus_tfidf, num_topics=10, id2word=dictionary, passes=500)
  topics = ldamodel.print_topics(num_words=5)

  for idx,lista_t in topics:
    parole_valore=[]
    tmp_p=re.sub('[\"]',"",lista_t)
    tmp_p=tmp_p.split(' + ') 
    coppia=list(t.split('*') for t in tmp_p)
    concetti_LDA['concetto_'+str(idx)]=[]
    for valore,parola in coppia:
      concetti_LDA['concetto_'+str(idx)].append((parola,valore))
  return ldamodel,concetti_LDA,corpus2

def punteggioLDA(concetti_LDA,parole):
  punteggi=dict()
  for key in concetti_LDA.keys():
    punteggio=0
    for i in parole:
      for concetto_parola,valore in concetti_LDA[key]:
        if(i == concetto_parola):
         punteggio+=float(valore)
    punteggi[key]=punteggio
  return punteggi

def result_TopicLDA(concetti_LDA,parole):
  risultato = []
  p=punteggioLDA(concetti_LDA,parole)
  massimo = max(p.values())
  for concetto,valore in p.items():
    if valore == massimo:
      risultato.append((concetto, concetti_LDA[concetto]))
  return (risultato)

def grafico_LDA(ldamodel,corpus2,dictionary):

  pyLDAvis.enable_notebook()
  lda_display = gensimvis.prepare(ldamodel, corpus2, dictionary, sort_topics=False)

  pyLDAvis.display(lda_display)

def hdp(corpus2,dictionary):
  hdpmodel = gensim.models.HdpModel(corpus=corpus2, id2word=dictionary)
  hdptopics = hdpmodel.show_topics(formatted=False)
  return hdpmodel,hdptopics

def punteggioHDP(hdptopics,parole):
  punteggi=dict()
  risultato = []
  for key,lista in hdptopics:
    punteggio=0
    for i in parole:
      for concetto_parola,valore in lista:
        if(i == concetto_parola):
         punteggio+=valore
    if punteggio!=0:
        risultato.append((key,lista))
    punteggi[key]=punteggio
  return punteggi

def result_TopicHDP(hdptopics,parole):
  risultato = []
  p=punteggioHDP(hdptopics,parole)
  massimo = max(p.values())
  #print("Risultato di ", corpus)
  for concetto,valore in p.items():
    if valore == massimo:
      risultato.append((concetto, hdptopics[concetto]))
  return (risultato)